/*
 * SafetyPayDirectMiddleLayerV20.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 02/21/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SafetyPayDirectMiddleLayerV20.PCL;
using SafetyPayDirectMiddleLayerV20.PCL.Http.Request;
using SafetyPayDirectMiddleLayerV20.PCL.Http.Response;
using SafetyPayDirectMiddleLayerV20.PCL.Http.Client;
using SafetyPayDirectMiddleLayerV20.PCL.Models;

namespace SafetyPayDirectMiddleLayerV20.PCL.Controllers
{
    public partial class UserSectionController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static UserSectionController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static UserSectionController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new UserSectionController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Get Users List
        /// </summary>
        /// <return>Returns the List<User> response from the API call</return>
        public async Task<List<User>> GetUsersAsync()
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Bad Request", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Not Authorized", _context);

            else if (_response.StatusCode == 402)
                throw new APIException(@"Request Failed", _context);

            else if (_response.StatusCode == 405)
                throw new APIException(@"Method not Allowed", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Error 500", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<User>>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// Add a new user
        /// </summary>
        /// <param name="body">Optional parameter: TODO: type parameter description here</param>
        /// <return>Returns the Customer response from the API call</return>
        public async Task<Customer> AddUserAsync(
                User body = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Bad Request", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Not Authorized", _context);

            else if (_response.StatusCode == 402)
                throw new APIException(@"Request Failed", _context);

            else if (_response.StatusCode == 405)
                throw new APIException(@"Method not Allowed", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Error 500", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Customer>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// Get List of User List By Type
        /// </summary>
        /// <param name="type">Required parameter: Customer Type</param>
        /// <return>Returns the List<User> response from the API call</return>
        public async Task<List<User>> GetUsersByTypeAsync(
                string type)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users/by_type/{type}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "type", type }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Bad Request", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Not Authorized", _context);

            else if (_response.StatusCode == 402)
                throw new APIException(@"Request Failed", _context);

            else if (_response.StatusCode == 405)
                throw new APIException(@"Method not Allowed", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Error 500", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<User>>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// User Login Call
        /// </summary>
        /// <param name="password">Optional parameter: TODO: type parameter description here</param>
        /// <param name="username">Optional parameter: TODO: type parameter description here</param>
        /// <return>Returns the User response from the API call</return>
        public async Task<User> PostUsersLoginAsync(
                List<string> password = null,
                List<string> username = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users/login");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "password", password },
                { "username", username }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Bad Request", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Not Authorized", _context);

            else if (_response.StatusCode == 402)
                throw new APIException(@"Request Failed", _context);

            else if (_response.StatusCode == 405)
                throw new APIException(@"Method not Allowed", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Error 500", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<User>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// Get User by ID
        /// </summary>
        /// <param name="id">Required parameter: User ID</param>
        /// <return>Returns the User response from the API call</return>
        public async Task<User> GetUserByIdAsync(
                string id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Bad Request", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Not Authorized", _context);

            else if (_response.StatusCode == 402)
                throw new APIException(@"Request Failed", _context);

            else if (_response.StatusCode == 405)
                throw new APIException(@"Method not Allowed", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Error 500", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<User>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// Update User
        /// </summary>
        /// <param name="id">Required parameter: TODO: type parameter description here</param>
        /// <param name="body">Optional parameter: TODO: type parameter description here</param>
        /// <return>Returns the User response from the API call</return>
        public async Task<User> PutUsersIdAsync(
                string id,
                User body = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Bad Request", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Not Authorized", _context);

            else if (_response.StatusCode == 402)
                throw new APIException(@"Request Failed", _context);

            else if (_response.StatusCode == 405)
                throw new APIException(@"Method not Allowed", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Error 500", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<User>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <param name="id">Required parameter: User ID</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteUserAsync(
                string id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Bad Request", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Not Authorized", _context);

            else if (_response.StatusCode == 402)
                throw new APIException(@"Request Failed", _context);

            else if (_response.StatusCode == 405)
                throw new APIException(@"Method not Allowed", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Error 500", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 